import os
import cv2 as cv
import numpy as np
import tensorflow as tf
from keras.src.utils import image_dataset_from_directory, load_img, img_to_array
from tensorflow.keras import layers, models

# Создаем датасеты для обучения и тестирования
train_dataset = image_dataset_from_directory(
    'img',
    validation_split=0.2,
    subset='training',
    seed=42,
    image_size=(224, 224),
    batch_size=32,
    label_mode='binary'
)

validation_dataset = image_dataset_from_directory(
    'img',
    validation_split=0.2,
    subset='validation',
    seed=42,
    image_size=(224, 224),
    batch_size=32,
    label_mode='binary'
)

# Предварительная обработка данных
AUTOTUNE = tf.data.AUTOTUNE
train_dataset = train_dataset.cache().shuffle(1000).prefetch(buffer_size=AUTOTUNE)
validation_dataset = validation_dataset.cache().prefetch(buffer_size=AUTOTUNE)

# Создание модели
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

# Компиляция модели
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# Обучение модели
history = model.fit(
    train_dataset,
    validation_data=validation_dataset,
    epochs=10
)

# Оценка модели
test_loss, test_acc = model.evaluate(validation_dataset)
print(f"Точность на тестовой выборке: {test_acc}")

# Сохранение модели (опционально)
model.save('model.h5')

# Функция предсказания
def predict_image(image_path, model, target_size=(224, 224)):
    try:
        img = load_img(image_path, target_size=target_size)
        img_array = img_to_array(img)  # Диапазон [0, 255], как в image_dataset_from_directory
        img_array = np.expand_dims(img_array, axis=0)
        prediction = model.predict(img_array)
        return 1 if prediction[0][0] > 0.5 else 0
    except Exception as e:
        print(f"Ошибка при предсказании: {e}")
        return 0

# Функция поиска события в видео
def find_event(url: str):
    cap = cv.VideoCapture(url)
    if not cap.isOpened():
        print("Не удалось открыть видео")
        return 0

    event_found = False  # Флаг для отслеживания события
    temp_image_path = 'temp_frame.png'

    try:
        while cap.isOpened():
            ret, frame = cap.read()
            if not ret:  # Если кадры закончились
                break

            # Сохранение текущего кадра как временное изображение
            cv.imwrite(temp_image_path, frame)

            # Предсказание для текущего кадра
            prediction = predict_image(temp_image_path, model)
            if prediction == 1:
                print("Кадр предсказан как 1")
                event_found = True
            else:
                print("Кадр предсказан как 0")

        cap.release()

        # Удаляем временный файл после обработки
        if os.path.exists(temp_image_path):
            os.remove(temp_image_path)

        # Возвращаем результат после проверки всех кадров
        if event_found:
            print("Найдено событие в видео")
            return 1
        else:
            print("Событие не найдено")
            return 0

    except Exception as e:
        print(f"Ошибка при обработке видео: {e}")
        cap.release()
        if os.path.exists(temp_image_path):
            os.remove(temp_image_path)
        return 0

# Пример использования
url = "data/00000.mp4"
prediction = find_event(url)
print(f"Итоговый результат: {prediction}")